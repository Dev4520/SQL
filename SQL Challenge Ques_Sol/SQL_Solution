create database practice;
use practice;
create table orders
(
    ord_no int,
    purch_amt float,
    ord_date date,
    customer_id int,
    salesman_id int
);

select * from orders;
insert into orders values(70001,150.5,'2012-10-05',3005,5002);
insert into orders values(70009,270.65,'2012-09-10',3001,5005);
insert into orders values(70002,65.26,'2012-10-05',3002,5001);
insert into orders values(70004,110.5,'2012-08-17',3009,5003);
insert into orders values(70007,948.5,'2012-09-10',3005,5002);
insert into orders values(70005,2400.6,'2012-07-27',3007,5001);
insert into orders values(70008,5760,'2012-09-10',3002,5001);
insert into orders values(70010,1983.43,'2012-10-10',3004,5006);
insert into orders values(70003,2480.4,'2012-10-10',3009,5003);
insert into orders values(70012,250.45,'2012-06-27',3008,5002);
insert into orders values(70011,75.29,'2012-08-17',3003,5007);
insert into orders values(70012,3045.6,'2012-04-25',3002,5001);

select * from orders;

Q1. Write a query to display the columns in a specific order, such as order date,
salesman ID, order number, and purchase amount for all orders.
Sol:- select ord_date,salesman_id,ord_no,purch_amt from orders;

2. From the following table, write a SQL query to locate salespeople who live in the city
of 'Paris'. Return salesperson's name, city.
Sol:-select name,city from salespeople where city = 'Paris';

create table salespeople
(
    salesman_id int,
    name varchar(50),
    city varchar(50),
    commsission float
);
select * from salespeople;
insert into salespeople values(5001,'james Hoog','New York',0.15);
insert into salespeople values(5002,'Nail knite','Paris',0.13);
insert into salespeople values(5005,'Pit Ales','London',0.11);
insert into salespeople values(5006,'Mc Lyon','Paris',0.14);
insert into salespeople values(5007,'Paul Adam','Rome',0.13);
insert into salespeople values(5003,'Lauson Hen','San Jose',0.12);

select * from salespeople;

Q3. From the following table, write a SQL query to select a range of products whose
price is in the range Rs.200 to Rs.600. Begin and end values are included. Return
pro_id, pro_name, pro_price, and pro_com.
Sol:- select * from sales where PRO_PRICE >= 200 AND PRO_PRICE <=600;

create table sales
(
    PRO_ID INT,
    PRO_NAME VARCHAR(50),
    PRO_PRICE FLOAT,
    PRO_COM INT
);
select * from sales;
insert into sales values(101,'Motherboard',3200.00,15);
insert into sales values(102,'keyboard',450.00,16);
insert into sales values(103,'ZIP drive',250.00,14);
insert into sales values(104,'Speaker',550.00,16);
insert into sales values(105,'Moniter',5000.00,11);
insert into sales values(106,'DVD drive',900.00,12);
insert into sales values(107,'CD drive',800.00,12);
insert into sales values(108,'Printer',2600.00,13);
insert into sales values(109,'Refill cartridge',350.00,13);
insert into sales values(110,'Mouse',250.00,12);

select * from sales;

4. From the following table, write a SQL query to find the items whose prices are
higher than or equal to $550. Order the result by product price in descending, then
product name in ascending.

Return pro_name and pro_price

Sol:- a)select PRO_NAME,PRO_PRICE from sales where PRO_PRICE >= 550 order by PRO_PRICE, DESC;

      b)select PRO_NAME,PRO_PRICE from sales where PRO_PRICE >= 550 order by PRO_NAME asc;

5. From the following table, write a SQL query to find details of all orders excluding
those with ord_date equal to '2012-09-10' and salesman_id higher than 5005 or
purch_amt greater than 1000.Return ord_no, purch_amt, ord_date, customer_id and
salesman_id.

Sol:- select ord_no,purch_amt,ord_date,customer_id,salesman_id from orders where ord_date='2012-09-10' and salesman_id>5005 or purch_amt>1000;

Q6. Create the table world with your schema and find the below queries !

create table world
(
    name varchar(50),
    continent varchar(50),
    area bigint,
    population bigint,
    gdp bigint
);
select * from world;

insert into world values('Afghanistan','Asia',652230,25500100,20343000000);
insert into world values('Albania','Europe',28748,2831741,12960000000);
insert into world values('Algeria','Africa',2381741,37100000,188681000000);
insert into world values('Andorra','Europe',468,78115,3712000000);
insert into world values('Angola','Africa',1246700,20609294,100990000000);
insert into world values('Dominican Republic','Caribbean',48671,9445281,58898000000);
insert into world values('China','Asia',9596961,1365370000,8358400000000);
insert into world values('Colombia','South America',1141748,47662000,369813000000);
insert into world values('Comoros','Africa',1862,743798,616000000);
insert into world values('Denmark','Europe',43094,5634434,314889000000);
insert into world values('Djibouti','Africa',23200,886000,1361000000);
insert into world values('Dominica','Caribbean',751,71293,499000000);

select * from world;

1. Write a query to fetch which country has the highest population?
Sol:-select max(population) as population,name from world;

2.write a query to fetch the name of the country which has the least gdp?
Sol:-select min(gdp) as gdp,name from world;

3. Write a query to fetch the name of the country which ends with letter C?
Sol:-select * from world where name like '%c';

4.write a query to fetch the name of the country which starts with letter D?
Sol:-  select * from world where name like 'D%';

5.write query to fetch which continent has highest gdp?
Sol:-select max(gdp) as GDP, name from world;

6.Give the total GDP of Africa?
Sol:-select sum(gdp) as total_gdp from world where continent='Africa';

7.write a query to fetch the total population for each continent?
Sol:- select continent, sum(population) as each_continent from world group by continent;

8. For each relevant continent show the number of countries that has a population of at least
200000000?
Sol:- select name,continent, max(population) as max_pop,count(name) as count_country from world group by continent,name;

Hint: Can be solved using aggregate function

Q7. Problem statement: Suppose we have two table students and cours

create database practice;
show databases;
create table students
(
    student_id int, 
    student_name varchar(60),
    city varchar(60) not null,
    primary key(student_id)
);
select * from students;

create table course
(
    student_id int,
    course_name varchar(60) not null,
    Marks int not null,
    primary key(student_id),
    foreign key(student_id) references students(student_id)
);
select * from course;
select * from course;
drop table course;
select * from course;

create table course
(
    student_id int,
    course_name varchar(60) not null,
    Marks int not null,
    primary key(student_id),
    foreign key(student_id) references students(student_id)
);
select * from course;
select * from course;
drop table course;
select * from course;

insert into students values
(200,'John Doe','Delhi'),
(210,'John Doe','Delhi'),
(220,'Moon ethan', 'Delhi'),
(230,'jessie','Banglore'),
(240,'Benbrook','Bihar'),
(250,'Ethan','Delhi'),
(260,'Johnnie','Bangalore'),
(270,'Goa','Delhi'),
(380,'John Doe','Delhi'),
(280,'Pavi','Delhi'),
(290,'Sanvi','Rajasthan'),
(300,'Navyaa','Banglore'),
(310,'Ankul','Bihar'),
(311,'Hitanshi','Banglore'),
(312,'Aayush','Bihar'),
(313,'Rian','Delhi');

select * from students;
set foreign_key_checks=0;
truncate table students;


insert into course values
(200,'Datascience',75),
(210,'Datascience',75),
(220,'Dataanalyst',80),
(230,'Dataanalyst',80),
(240,'Dataanalyst',84),
(250,'Dataanalyst',50),
(260,'Datascience',80),
(270,'Datascience',99),
(380,'Datascience',45),
(280,'Datascience',78),
(290,'Dataanalyst',78),
(300,'Computer vision',90),
(310,'Computer vision',90),
(311,'Computer vision',75),
(312,'Computer vision',39);

select * from course;











